require 'rdf'
require 'rdf/ntriples'

require_relative '../alchemy-concept-extractor.rb'
require_relative '../lib/extractor.rb'
require_relative '../lib/reporter.rb'
require_relative '../lib/refiner.rb'

include RDF

# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  config.treat_symbols_as_metadata_keys_with_true_values = true
  config.run_all_when_everything_filtered = true
  config.filter_run :focus

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'
end

def outfiles_location
  File.join(File.dirname(__FILE__),'data','out')
end

def datfile_location
  File.join(File.dirname(__FILE__),'data','dat.file')
end

def dummy_json_file_location
  File.join(File.dirname(__FILE__),'data','mock_alchemy_api_response.json')
end

def dummy_api_key
  "dummy_api_key"
end

def dummy_json
  IO.read(dummy_json_file_location)
end

def dummy_concepts
  { :concept => :value }
end

def dummy_refiner 
  if @dummy_refiner.nil?
    @dummy_refiner = AlchemyConceptExtractor::Refiner.new
  end

  @dummy_refiner
end

def dummy_rest_client
  if @dummy_rest_client.nil?
    @dummy_rest_client = RestClient
    @dummy_rest_client.stub(:get) { dummy_json }
    @dummy_rest_client.stub(:proxy=)
  end

  @dummy_rest_client
end

def stub_concepts
  JSON.parse(dummy_json)
end

def people_query
  query = RDF::Query.new({
    :person => {
      RDF.type  => FOAF.Person,
      FOAF.name => :name,
    }
  })

  query
end

def places_query
 
end
